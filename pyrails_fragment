def save_editing():                                 # процедура сохранения редактирования либо добавления нового рельсового дефекта
    global tabs_timer                               # глобальная переменная
    errcode=rails_defects_valid_check()             # получаем код ошибки
    if errcode!=0:                                  # если реакально ошибка есть
        tab4_check_error(errcode)                   # переходим на процедуру обработки ошибок
    else:                                           # иначе (если ошибок нет) то
        ann=tab4_editor_annotation.get()            # начинаем обработку вот считываем примечание к дефекту
        if len(ann)>19:                             # обрезаем если оно слишком длиннное
            ann=ann[:18]                            # наше примечание
            ann=ann + '...'                         # ибо нефиг
        if side==False:                             # если нитка
            bstatus=rstatus_left                    # левая то
        else:                                       # используем соответственную
            bstatus=rstatus_right                   # базу данных ниток
        stmk=stm/25                                 # пересчитываем
        fnmk=fnm/25                                 # и здесь тоже
        if errcode==0:                              # если нет ошибок
            if stmk>rw_count or fnmk>rw_count:      # проверяем на выхождение за границы перегона
                errcode=3                           # ошибка нашлась
                tab4_check_error(errcode)           # опять переход на процедуру обработки
            tc=tab4_editor_code.get()               # считываем указанный код дефекта
            if len(tc)==0:                          # код у нас обязательное поле
                tab4_editor_code.focus()            # ставим фокус в поле код
                errcode=5                           # код ошибки
                tab4_check_error(errcode)           # переход на процедуру обработки ошибок
            if errcode==0:                          # если ошибки тут нет то
                xt=False                            # проверяем может там другой дефект накладываться строго не должны накладываться.
                i=int(stmk)                         # 
                me=int(fnmk)+1                      #
                ic=i                                #
                if tab4_editmode==True:             # если режим правки
                    while ic<me:                    # цикл по всем
                        bstatus[ic]=False           # маскируем все звенья этого дефекта
                        ic+=1                       # следующий
                while i<me:                         #
                    bv=bstatus[i]                   #
                    if bv==True:                    #
                        xt=True                     #
                    i+=1                            #
                if xt==True:                        #
                    errcode=4                       #
                    tab4_check_error(errcode)       #
                if errcode==0:                      # готовимся к добавлению дефекта
                    stmk*=10                        # умножаем 
                    fnmk*=10                        # на 10
                    date=tab4_editor_date.get()     # считываем дату
                    tc=tc[:4]                       # обрезаем код
                if tab4_editmode==False:            # в зависимости от режима
                    add_new_rail_defect(stmk, fnmk, tc, date, side, ann)        # добавление
                else:                               # иначе
                    update_rail_defect(stmk, fnmk, tc, date, side, ann)         # или обновленик
def tab4_check_error(errcode):              # процедура вывода сообщений об ошибках
    global tabS_timer                       # наш глобальный таймеер интерактивности
    err_msg=errmsg[errcode]                 # получаем сообщение об ошибке
    err_msg='Ошибка! ' + err_msg            # добавляем само слово ошибка
    tab4_textinfo.config(state=NORMAL)      #
    tab4_textinfo.delete('1.0', END)        #
    tab4_textinfo.insert('1.0', err_msg)    #
    tab4_textinfo.config(fg='red')          #
    tab4_textinfo.config(state=DISABLED)    #
    tabs_timer=12                           #
def tab5_service_message(msgcode):          #
    global tabs_timer                        #
    serv_msg=servmsg[msgcode]               #
    serv_msg='Ok. ' + serv_msg              #
    tab5_textinfo.config(state=NORMAL)      #
    tab5_textinfo.delete('1.0', END)        #
    tab5_textinfo.insert('1.0', serv_msg)   #
    tab5_textinfo.config(fg='blue')         #
    tab5_textinfo.config(state=DISABLED)    #
    tab5timer=8
def tab4_service_message(msgcode):          # процедура вывода сервисных сообщений
    global tabs_timer                       # наш глобальный таймер интерактивности
    serv_msg=servmsg[msgcode]               # само сервисное сообщение
    serv_msg='Ок. ' + serv_msg              #
    tab4_textinfo.config(state=NORMAL)      #
    tab4_textinfo.delete('1.0', END)        #
    tab4_textinfo.insert('1.0', serv_msg)   #
    tab4_textinfo.config(fg='blue')         #
    tab4_textinfo.config(state=DISABLED)    #
    tabs_timer=8                            #
def erase_defect():                         # процедура удаления рельсового дефекта
    if tab4_editmode==False:                # если добавление
        view_in_browser_rail_defects()      # переход на процедуру формирования html для просмотра
    else:                                   # иначе
        delete_rail_defect()                # переход на удаление дефекта
def tab4_insert_date():                     # вставлияем текущую дату в поле даты дефекта
    d=datetime.datetime.today()             # вставляем значение
    t=d.strftime('%d:%m:20%y')              # текущей даты
    tab4_editor_date.delete('0', END)       #
    tab4_editor_date.insert(END, t)         #
def tabmode4_view():                        # вкладка ДЕФЕКТЫ РЕЛЬС                                       
    i=0
    py=0
    dtabr='flat'
    tab4_list.delete(0, END)
    compose_defects_data_for_listbox()      # начинаем заполнять список выбора дефектов
    i=0                                     #
    while i<len(def_list):                  #
        t=def_list[i]                       #
        tab4_list.insert(i, t)              #
        i+=1                                # следующий
    tab4_insert_date()                      # вставляем
def tabmode5_view():                        # вкладка КРИВЫЕ
    compose_curves_data_for_listbox()       # подготовка данных для их выбора
    tab5_list.delete(0, END)                # удаляем из listboxа все данные
    i=0                                     # обнуляем счетчик
    while i<len(curv_list):                 # цикл по всем найденным кривым
        t=curv_list[i]                      # считываем
        tab5_list.insert(i, t)              # вставляем
        i+=1                                # инкрементируем счетчик
def tabmode6_view():                        # вкладка РЕЛЬЕФ выемки/насыпи именно здесь будут
    tab6_list.delete(0, END)                # очищаем listbox
    if geo_count>0:                         # если количество выемок/насыпей больше нудя то
        compose_relief_data_for_listbox()   # подготовка данных для их выбора в listbox
        i=0                                 # обнуляем счетчик
        while i<len(geo_list):              # цикл
            t=geo_list[i]                   # считываем
            tab6_list.insert(i, t)          # вставляем
            i+=1                            # инкрементируем
if __name__ == "__main__":                  #
    init=False                                      #
    # -------- первоначальная инициализация --------
    dir_root=os.getcwd()+os.sep                     # корневая папка
    dir_way=dir_root+'waydata' + os.sep             # папка с drw файлами
    dir_img=dir_root+'images'+os.sep                # папка с файлами картинок
    dir_export=dir_root+'export'+os.sep             # папка для экспортируемых
    ext='.drw'                                      # расширение файлов данных
    eg='*'+ext                                      # добавляем для glob
    # ------- инициализация переменных/массивов -----
    sel_cr_new_index=255                            # индекс кривой при новом пересчете
    sel_cr_old_index=255                            # индекс кривой старого пересчета кривых
    src_file=''                                     # исходный файл
    list_data=[]                                    # список с данными о перегонах
    tktop=2                                         # отступ сверху
    tkright=2                                       # отступ справа
    tabr='ridge'                                    # рельеф контролов в таблицах notebookа
    labelfont=('serif', 10)                         # шрифт меток gui
    navfont=('serif', 12)                           # шрифт навигации
    ffont=('serif', 9)                              # навигационный шрифт
    titfont=('serif', 16)                           # титульный шрифт
    stfont=('serif', 13)                            # субтитульный шрифт
    kfont=('serif', 9, 'italic')                    # курсив
    monofont=('courier', 10)                        # моноширинный шрифт для listboxа дефектов рельс
    sfont=('serif', 7)                              # шрифт для названий станций
    tab4helpmsg=['Чтобы начать редактирование дефектов рельс кликните по id нужного дефекта.', 'Для быстрого перехода к началу или концу дефекта кликните по значению <нач.> или <кон.> нужного дефекта соответственно', 'Значения <нач.> и <кон.> в таблице выше округлены до целого значения.']
    sectionfont=('serif', 10, 'bold')               # шрифт раздела
    canvas_height=650                               # основной холст - высота
    canvas_width=350                                # основной холст - ширина
    pcanvas_width=100                               # preview canvas - ширина
    flag_jump_to_begin_defect=True                  # флаг настроек нужно ли переходить к началу дефекта при его выборе
    flag_auto_backup=True                           # флаг автоматического бэкапа при начале работы с программой
    flag_auto_backup_current=flag_auto_backup       # текущее значение флага
    flag_defects_sort_by_begin=True                 # флаг сортировки дефектов в таблице по отметке начала дефекта
    flag_curves_sort_by_begin=True                  # флаг сортировки кривых по отметке начала дефекта
    flag_jump_to_begin_curve=True                   # флаг необходимости переходить к началу кривой при ее выборе
    flag_geo_sort_by_begin=True                     # флаг сортировки гео-объектов по начальной отметке.
    flag_jump_to_begin_geo=True                     # флаг перехода к началу гео-объекта
    pxlr=int(canvas_height/10)                      # переводная величина в высоте холста
    side=0                                          # нитка рельса (лев./прав.)
    dirc=0                                          # направление кривой пути (лев./прав.)
    sdelta=0                                        # величина скролла
    quit_delay=3                                    # величина паузы при выходе из программы
    quit_mode=False                                 # режим выхода из программы
    st1=''                                          # станция 1 (верхняя, исходная)
    st2=''                                          # станция 2 (нижняя, конечная)
    stm=0                                           # начальная отметка
    fnm=0                                           # конечная отметка
    tab0_infolist=[]                                # лист со всей информацией о tab0 - текущее звено
    errmsg=[]                                       # пустой пока список с сообщениями ошибок
    errmsg.append('')                                                                                           # 0 - нет ошибок
    errmsg.append('Введите корректные числовые значения отметок начала и конца дефекта')                        # 1 - дефекты рельс - некорректные значения
    errmsg.append('Отметка начала дефекта должна быть меньше чем отметка его конца')                            # 2 - дефекты рельс - неправильный порядок значений
    errmsg.append('Отметки начала и конца дефекта не должны выходить за пределы перегона')                      # 3 - дефекты рельс - выход за границы перегона
    errmsg.append('Наложение дефектов рельс, в нитке звена не может быть больше чем один дефект')               # 4 - дефекты рельс - наложение
    errmsg.append('Обязательно укажите код дефекта')                                                            # 5 - дефекты рельс - указать код дефекта
    errmsg.append('Отметки начала и конца дефекта не должны совпадать (нулевая длина недопустима')              # 6 - дефекты рельс - нулевая длина
    errmsg.append('Введите корректные числовые значения отметок начала и конца кривой')                         # 7 - кривые пути -   некоректные значения
    errmsg.append('Отметка начала кривой должна быть меньше чем его отметка ее конца')                          # 8 - кривые пути -   неправильный порядок значений
    errmsg.append('Отметки начала и конца кривой не должны совпадать (нулевая длина недопустима)')              # 9 - кривые пути -   нулевая длина
    errmsg.append('обязательно укажите радиус кривой пути')                                                     # 10 - кривые пути -  указать радиус
    errmsg.append('обязательно укажите возвышение кривой пути')                                                 # 11 - кривые пути -  указать возвышеник/высоту
    errmsg.append('Укажите корректный радиус кривой пути')                                                      # 12 - кривые пути -  указать корректный радиус
    errmsg.append('Отметки начала и конца кривой не должны выходить за границы перегона')                       # 13 - кривые пути -  выход за границы перегона
    errmsg.append('Наложение кривых пути, на протяжении одного звена не может быть больше одной кривой')        # 14 - кривые пути - наложение кривых
    errmsg.append('Введите корректные числовые значения отметок начала и конца гео-объекта')                    # 15 - гео объекты - некорректные значения
    errmsg.append('Отметка начала гео-объекта должна быть раньше чем отметка его конца')                        # 16 - гео объекты - неправильный порядок значений
    errmsg.append('Отметки начала и конца гео-объекта не должны выходить за границы перегона')                  # 17 - гео объекты - выход за границы перегона
    errmsg.append('Наложение гео-объектов не допустимо)')                                                       # 18 - гео объекты - наложение гео-объектов
    errmsg.append('Отметки начала и конца гео-объектов не должны совпадать (нулевая длина недопустима)')        # 19 - гео-объекты - нулевая длина
    errmsg.append('Обязательно укажите величину высоты гео-объекта')                                            # 20 - гео-объекты - указать высоту
    errmsg.append('Значение высоты гео-объекта не может быть нулевым')                                          # 21 - гео объекты - нулевая величина высоты
    errmsg.append('Данные звена не были изменены')                                                              # 22 - звено - данные не изменились
    errmsg.append('Введите корректные значения данных о звене')                                                 # 23 - звено - некорректные данные
    errmsg.append('Доля дефектных шпал не может быть больше 100%')                                              # 24 - звено - некорректное процент дефектных шпал
    errmsg.append('Доля дефектных скреплений не может превышать 100%')                                          # 25 - звено - слишком много дефектных скреплений
    errmsg.append('Доля негодного щебня не может превышать 100%')                                               # 26 - звено - слишком много дефектного щебня
    errmsg.append('Обязательно укажите тип рельс')                                                              # 27 - звено - указать тип рельс
    errmsg.append('Обязательно укажите тип дефекта шпал')                                                       # 28 - звено - указать тип дефекта шпад
    errmsg.append('Обязательно укажите тип скреплений')                                                         # 29 - звено - указать тип скреплений
    servmsg=[]                                                                                                  # создаем пустой список
    servmsg.append('Дефект добавлен')                                                                           # 1
    servmsg.append('Дефект изменен')                                                                            # 2
    servmsg.append('Дефект удален')                                                                             # 3
    servmsg.append('Кривая пути добавлена')                                                                     # 4
    servmsg.append('Кривая пути изменена')                                                                      # 5
    servmsg.append('Кривая пути удалена')                                                                       # 6
    servmsg.append('Гео-объект добавлен')                                                                       # 7
    servmsg.append('Гео-объект изменен')                                                                        # 8
    servmsg.append('Гео-объект удвлен')                                                                         # 9
    servmsg.append('Данные звена изменены')                                                                     # 10
    st1label=''                                     # метка верхней станции
    st2label=''                                     # метка нижней станции
    crv_lenght=0                                    # суммарная длина всех кривых
    geo_lenght=0                                    # суммарная длина всех выемок насыпей
    way_text=''                                     # текст с именем перегона
    wintitle='PyRails'                              # заголовок окна и название программы
    canvasx=454                                     # позиция основного холста по x (ширина)
    frw=160                                         # ширина фрагмента картинки
    frh=59                                          # высота фрагмента картинки
    intr=500                                        # интервал срабатыввния after
    xs=['лев. ', 'прав.']                           # нитка рельса
    rsm=['пикету', 'километру', 'всему перегону'] #
    rsmode=0                                        # режим по рельсовому селектору
    slmode=0                                        # режим по селектору шпал
    rw_count=0                                      # количество звеньев пути
    rwd_count=rw_count*10                           # количество звеньев * 10
    dr_count=0                                      # количество дефектов рельс
    crv_count=0                                     # количество кривых
    geo_count=0                                     # количество геодез. объектов (выемки/насыпи)
    ways_count=0                                    # количество перегонов всего
    deflink_count=0                                 # количество дефектных звеньев пути
    cur_link=0                                      # текущее звено пути
    logfile=dir_root+'pyrails.log'                  # журнальный файл программы
    ld=len(dir_way)                                 # длина
    sl_wood_count=0                                 # деревянные - всего
    sl_wood_defcount=0                              # деревянные - дефектные
    sl_conc_count=0                                 # бетонные - всего
    sl_conc_defcount=0                              # бетонные дефектные
    rstatus_left=[]                                 # повреждения по левой нитке
    rstatus_right=[]                                # повреждения по правой нитке
    crv_status=[]                                   # статус по кривым
    geo_status=[]                                   # статус по гео-объектам (выемки/насыпи)
    tabs_timer=0                                    # таймер ошибок и сообщений tab4
    rect_flash=False                                # мигание прямоугольника
    tab4_incounter=0                                # счетчик интерактивности для tab4
    winlocker=None
    lock_filename='pyrails.lock'                    # имя файла блокировки
    lock_file=dir_root+lock_filename                #
    ccy=0                                           # велиичина смещения кривой по оси Y
    fch=1050                                        # полная длина нащей кривой
    errcode=0                                       # код ошибки
    edmetr='Единица измерения - метр' + ' '*81      # укаазание единицы измерения для табов
    tab_mode=0                                      # номер открытой вкладки
    tab4_editmode=False                             # False - редактирование, True - создание новой (это все по рельсовым дефектам)
    tab5_editmode=False                             # False - редактирование, True - создание новой (это все по кривым)
    tab6_editmode=False                             # False - редактирование, True - создание новой (это все по гео-объектам)
    over_preview=False                              # флаг, индикатор того что курсор мышли над preview
    def_list=[]                                     # список с дефектами для listbox
    curv_list=[]                                    # список с кривыми для listbox
    geo_list=[]                                     # список с данными по выемкам/насыпям для listbox (geo объекты)
    list_km=[]                                      # список покилометрово
    list_pk=[]                                      # лист по пикетно
    vy=0                                            # координата по y для табов
    stm=0                                           # начальная отметка
    fnm=0                                           # конечная отметка
    tab4_id=0                                       # идентификатор дефекта
    tab5_id=0                                       # идентификатор кривой
    tab6_id=0                                       # идентификатор выемки или насыпи
    rtab_id=0                                       # реальный по счету идентификатор
    sdata_wood=0                                    # данные по дефектным шпалам деревянным
    sdata_conc=0                                    # данные по дефектным шпалам бетонным
    td='</td><td align="center">'                   # новая ячейка в таблице выравнивание по центру
    d2data=[]                                       # данные по дефектам с декрементированными ключами
    defno=0                                         # номер следующего дефекта рельса
    # -------- поиск файлов баз данных drw ---------#
    os.chdir(dir_way)                               # переходим в папку waydata
    ways_files=glob.glob(eg)                        # считываем список файлов подхлодящих нам
    os.chdir(dir_root)                              # переходим в корневую папку
    set_ways_list()                                 # готовим информационную строку для каждого файла перегона
    ways_count=len (list_data)                      # рассчитываем количество перегонов
    root=Tk()                                       # tkinter
    root.protocol('WM_DELETE_WINDOW', lambda: None) # игнорируем нах закрытие окна
    screen_width=root.winfo_screenwidth()           # ширина экрана в пикселах
    screen_height=root.winfo_screenheight()         # высота экрана в пикселах
    root.title('PyRails')                           # заголовок окна
    root.resizable(False, False)                    # запретить ресайз
    root.geometry('1360x760')                       # задаем геометрию окна
    root.bind('<MouseWheel>', railway_scroll)       # биндим событие скролла
    root.after(intr, interactive)                   # наша интерактивность
    dcn1=Label(None, text='')                       # метки
    dcn2=Label(None, text='')                       #
    crn=Label(None, text='')                        # а это метка кривой
    gtx=Label(None, text='')                        # метка с информацией о гео-объектах
    tab3_frame1=LabelFrame()                        # первая рамка
    tab3_frame2=LabelFrame()                        # вторая рамка
    tab3_frame3=LabelFrame()                        # третий фрейм тот который со списком
    tab3_combo=ttk.Combobox()                       # combobox
    # -------- GUI ----------------------------------              
    lblWayList=Label(root, text='Выберите перегон') # метка
    lblWayList.config(font=labelfont)               # для 
    lblWayList.place(x=tkright, y=tktop)            # списка перегонов
    WayList=Listbox(root)                           # сам
    WayList.config(font=labelfont, width=63, height=24, relief='sunken')    # список
    WayList.place(x=tkright, y=tktop+20)                                    # перегонов
    WayList.bind('<Double-1>', sel_list)                                    # цепляем обработку выбора элемента списка
    if ways_count!=0:                               # если количество файлов >0
        compose_ways_list()                         # то переходим в добавление их в наш listbox
    of1=440                                         #
    fpy=202                                         #
    if flag_auto_backup==True:                      # если флаг установлен
        backup_data_files()                         # то сделать бэкап файлов перегонов
